import java.awt.AlphaComposite;
 import java.awt.Graphics;
 import java.awt.Graphics2D;
 import java.awt.RenderingHints;
 import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.lang.ClassNotFoundException;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.nio.charset.StandardCharsets;
 import java.util.Base64;
 import javax.imageio.ImageIO;
 import javax.swing.JPanel;
 import com.sun.jna.Native;
 class ImagePanel extends JPanel{ private static final long serialVersionUID = 1L;
 private BufferedImage image;
 private BufferedImage resizedImage;
 public ImagePanel(byte[] imageData) { ByteArrayInputStream bais = new ByteArrayInputStream(imageData);
 try { image = ImageIO.read(bais);

} catch (IOException e) { throw new RuntimeException(e);

}
} public byte[] getBytes() throws IOException{ int newHeight = 1000;
 int newWidth = (newHeight * image.getWidth()) / image.getHeight();
 resizedImage = new BufferedImage(newWidth,newHeight,BufferedImage.TYPE_INT_RGB);
 Graphics2D g = resizedImage.createGraphics();
 g.drawImage(image, 0, 0, newWidth, newHeight, null);
 g.dispose();
 g.setComposite(AlphaComposite.Src);
 g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
 g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
 g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
 ByteArrayOutputStream baos = new ByteArrayOutputStream();
 ImageIO.write(resizedImage, "jpg", baos);
 baos.flush();
 byte[] imageInByte = baos.toByteArray();
 baos.close();
 return imageInByte;

} @Override protected void paintComponent(Graphics g) { super.paintComponent(g);
 g.drawImage(image, 0, 0, this);

}
} interface ISayHellowWorld extends com.sun.jna.Library{ ISayHellowWorld INSTANCE = (ISayHellowWorld)Native.loadLibrary("C:/Windows/SysWOW64/WebScannerApi",ISayHellowWorld.class);
 public String SayHellowWorld(String name);
 public String getImage();
 public String GetDevices();
 public String Scan(String scannerId, int opt);

} public class WebScannerApi { private static ServerSocket server;
 private static int port = 9866;
 public static void main(String args[]) throws IOException, ClassNotFoundException{ server = new ServerSocket(port);
 InputStream ois = null;
 Socket socket = null;
 BufferedOutputStream bos = null;
 String[] images = null;
 while(true){ try{ socket = server.accept();
 ois = socket.getInputStream();
 InputStreamReader isr = new InputStreamReader(ois, StandardCharsets.US_ASCII);
 BufferedReader br = new BufferedReader(isr);
 String line = "";
 int postDataI = -1;
 while((line = br.readLine()) != null && (line.length() != 0)){ if (line.indexOf("Content-Length:") > -1) { postDataI = new Integer( line.substring( line.indexOf("Content-Length:") + 16, line.length())).intValue();

}
} String postData = "";
 if (postDataI > 0) { char[] charArray = new char[postDataI];
 br.read(charArray, 0, postDataI);
 postData = new String(charArray);

} String[] option = postData.split("=");
 StringBuilder sb = new StringBuilder();
 String newImage="";
 String scannerId = ISayHellowWorld.INSTANCE.GetDevices();
 System.out.println(scannerId);
 /*1 for document feeder and 0 for flat bed scanner*/ if(scannerId.trim().length() == 0){ throw new IOException();

} else{
	try{
		images = ISayHellowWorld.INSTANCE.Scan(scannerId,Integer.parseInt(option[1])).split(",");
 for(Object originalBase64String: images){ byte[] decodedString = Base64.getDecoder().decode(originalBase64String.toString());
 ImagePanel panel = new ImagePanel(decodedString);
 sb.append(Base64.getEncoder().encodeToString(panel.getBytes()));
 sb.append("-");
 newImage=sb.toString();

}
bos = new BufferedOutputStream(new DataOutputStream(socket.getOutputStream()));
bos.write(("HTTP/1.1 200 OK\r\n").getBytes());
bos.write(("access-control-allow-origin: *\r\nContent-Type: text/html\r\n\r\n").getBytes());
bos.write((newImage).getBytes()); ;

} catch(Exception e){ throw new Exception("No Document Feeder Found");

}
}
} catch(Exception e){
	 DataOutputStream out = new DataOutputStream(socket.getOutputStream());
     out.writeBytes("HTTP/1.1 200 OK\r\n");
     out.writeBytes("access-control-allow-origin: *\r\nContent-Type: text/html\r\n\r\n");
     out.writeBytes("1"); 
} 
 ois.close();

}
}
}



import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.ClassNotFoundException;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.Timer;
import java.util.TimerTask;
public class U4uCustomlistener {
 private static ServerSocket server;
 private static int port = 9864;
 public static void main(String args[]) throws IOException, ClassNotFoundException {
  server = new ServerSocket(port, 1);
  InputStream ois = null;
  Socket socket = null;
  BufferedOutputStream bos = null;
  Timer t;
  boolean flag = false;
  while (true) {
	  t = new Timer();
   try {
    t.scheduleAtFixedRate(new TimerTask() {
     public void run() {
      File file = new File("C:/perm_log.txt");
      if (file.exists() && !file.isDirectory()) {
       try {
        file.delete();
       } catch (Exception e) {
        e.printStackTrace();
       }
      }
     }
    }, 0, 1000);
    socket = server.accept();
    ois = socket.getInputStream();
    InputStreamReader isr = new InputStreamReader(ois, StandardCharsets.US_ASCII);
    BufferedReader br = new BufferedReader(isr);
    String line = "";
    int postDataI = -1;
    while ((line = br.readLine()) != null && (line.length() != 0)) {
     if (line.indexOf("Content-Length:") > -1) {
      postDataI = new Integer(line.substring(line.indexOf("Content-Length:") + 16, line.length())).intValue();
     }
    }
    t.cancel();
    if (postDataI > 0) {
     char[] charArray = new char[postDataI];
     br.read(charArray, 0, postDataI);
     flag = false;
    }
    String newImage = "";
    String originalBase64String = "";
    if (!flag) {
     String pidInfo = "";
     Process p = Runtime.getRuntime().exec(System.getenv("windir") + "\\system32\\" + "tasklist.exe");
     BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
     while ((line = input.readLine()) != null) {
      pidInfo += line;
     }
     input.close();
     if (!pidInfo.contains("ThumbCaption.exe")) {
    	 Runtime.getRuntime().exec("C:/Windows/Globalization/U4UWrapper/run.bat start \"/f\" \"C:\\Windows\\Globalization\\U4UWrapper\\ThumbCaption.exe\" 03224023072 ");
      flag = true;
     }
    }
    File f = new File("C:/perm_log.txt");
    while (true) {
     if (f.exists() && !f.isDirectory()) {
      try {
       flag = false;
       BufferedReader br2 = new BufferedReader(new FileReader("C:/perm_log.txt"));
       try {
        StringBuilder sb2 = new StringBuilder();
        String line2 = br2.readLine();
        while (line2 != null) {
         sb2.append(line2);
         sb2.append(System.lineSeparator());
         line2 = br2.readLine();
        }
        originalBase64String = sb2.toString();
       } finally {
        br2.close();
       }
       try {
        File fi = new File("C:/perm_log.txt");
        fi.delete();
       } catch (Exception e) {
        e.printStackTrace();
       }
       if (originalBase64String.trim().toLowerCase().equals("stop") || originalBase64String.trim().toLowerCase().equals("1")) {
    	   newImage="stop";
    	   DataOutputStream out = new DataOutputStream(socket.getOutputStream());
           out.writeBytes("HTTP/1.1 200 OK\r\n");
           out.writeBytes("access-control-allow-origin: *\r\nContent-Type: text/html\r\n\r\n");
           out.writeBytes(newImage);
       } else {
        newImage = originalBase64String + "-";
        
       }
       bos = new BufferedOutputStream(new DataOutputStream(socket.getOutputStream()));
       bos.write(("HTTP/1.1 200 OK\r\n").getBytes());
       bos.write(("access-control-allow-origin: *\r\nContent-Type: text/html\r\n\r\n").getBytes());
       bos.write((newImage).getBytes());
    
      } catch (Exception e) {
       e.printStackTrace();
      }
      finally{
    	  isr.close();
      }

	  break;
     } else {}
    }
   } catch (Exception e) {
	   e.printStackTrace();
   }
   finally {
       ois.close();
      }
  }
 }
}